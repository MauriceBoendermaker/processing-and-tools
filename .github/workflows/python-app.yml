name: Python application
 
on:
  push:
    branches:
      - 'main'
      - 'DevBranch'
  pull_request:
    branches:
      - '*'
 
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8

        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  unit-tests: 
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

    - name: execute unit-tests
      run: |
        pytest unit-tests/

  integration-tests: 
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

    - name: run CargoHubV2 server
      run: |
        uvicorn CargoHubV2.app.main:app --port 3000 &
        sleep 10
        curl http://localhost:3000/status

    - name: integratie tests CargoHubV2
      run: |
        python -m unittest discover -s integratie-tests -p 'Test*.py'

    - name: Stop the server
      run: |
        pkill -f "uvicorn CargoHubV2.app.main:app"
  
  test-coverage:
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests and generate coverage
      run: |
        coverageFile="processing-and-tools/coverage.xml"
        pytest --cov=CargoHubV2/app --cov-report=xml:$coverageFile

    - name: Debug coverage.xml path
      run: |
        coverageFile="processing-and-tools/coverage.xml"
        echo "Checking if coverage file exists at: $coverageFile"
        ls -al $coverageFile
        if [ -f "$coverageFile" ]; then
          echo "coverage.xml exists!"
        else
          echo "coverage.xml not found."
          exit 1
        fi

    - name: report
      uses: seahyinghang8/coverage-testgen@test
      with:
        coverageFile: "processing-and-tools/coverage.xml"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: $coverageFile
